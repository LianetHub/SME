(()=>{"use strict";"undefined"!=typeof Fancybox&&null!==Fancybox&&Fancybox.bind("[data-fancybox]",{dragToClose:!1,closeButton:!1}),$((function(){const t={Android:()=>/Android/i.test(navigator.userAgent),BlackBerry:()=>/BlackBerry/i.test(navigator.userAgent),iOS:()=>/iPhone|iPad|iPod/i.test(navigator.userAgent),Opera:()=>/Opera Mini/i.test(navigator.userAgent),Windows:()=>/IEMobile/i.test(navigator.userAgent),any:function(){return this.Android()||this.BlackBerry()||this.iOS()||this.Opera()||this.Windows()}};function e(){t.any()||$(window).width()<992?$("body").removeClass("_pc").addClass("_touch"):$("body").removeClass("_touch").addClass("_pc")}function n(){var t=$(".header__wrapper").outerHeight()/parseFloat($("html").css("font-size"));$("body").css("--header-height",t+"rem")}e(),$(window).on("resize",(()=>{e()})),$(document).on("click",(t=>{const e=$(t.target);if(e.closest(".menu__btn").length&&$(".header").toggleClass("open-menu"),e.is(".wrapper")&&$(".header").hasClass("open-menu")&&$(".header").removeClass("open-menu"),e.closest(".faq__item").length){const t=e.closest(".faq__item");t.toggleClass("active"),t.find(".faq__item-answer").slideToggle()}})),new IntersectionObserver((t=>{t[0].isIntersecting?$(".header").removeClass("scroll"):$(".header").addClass("scroll")})).observe($(".header")[0]),n(),$(window).on("resize",(function(){n()}));class s{static openDropdown=null;constructor(t){this.$select=$(t),this.defaultText=this.$select.find("option:selected").text(),this.selectName=this.$select.attr("name"),this.$options=this.$select.find("option"),this.icon=this.$select.data("icon"),this.title=this.$select.data("title"),this.$dropdown=null,this.initialState={},this.init()}init(){this.$select.length&&(this.saveInitialState(),this.$select.addClass("hidden"),this.renderDropdown(),this.setupEvents())}saveInitialState(){const t=this.$select.find("option:selected");this.initialState={selectedText:t.text(),selectedValue:t.val()}}renderDropdown(){const t=this.$select.is(":disabled");let e="";e=this.icon?`\n                    <button type="button" class="dropdown__button icon-chevron" \n                        aria-expanded="false" \n                        aria-haspopup="true" \n                        ${t?"disabled":""}>\n                        <span class="dropdown__button-icon ${this.icon}"></span>\n                        <span class="dropdown__button-text">${this.defaultText}</span>\n                    </button>\n                `:this.title?`\n                    <button type="button" class="dropdown__button icon-chevron" \n                        aria-expanded="false" \n                        aria-haspopup="true" \n                        ${t?"disabled":""}>\n                        <span class="dropdown__button-column">\n                            <span class="dropdown__button-caption">${this.title}</span>\n                            <span class="dropdown__button-text">${this.defaultText}</span>\n                        </span>\n                    </button>\n                `:`\n                    <button type="button" class="dropdown__button icon-chevron" \n                        aria-expanded="false" \n                        aria-haspopup="true" \n                        ${t?"disabled":""}>\n                        <span class="dropdown__button-text">${this.defaultText}</span>\n                    </button>\n                `,this.$dropdown=$(`\n                <div class="dropdown">\n                    ${e}\n                    <div class="dropdown__body" aria-hidden="true">\n                        <ul class="dropdown__list" role="listbox"></ul>\n                    </div>\n                </div>\n            `);const n=this.$dropdown.find(".dropdown__list");this.$options.each(((t,e)=>{const s=$(e),o=s.attr("value"),i=s.text(),d=s.is(":selected"),a=s.is(":disabled");n.append(`\n                    <li role="option"\n                        data-value="${o}"\n                        aria-checked="${d}"\n                        class="dropdown__list-item${d?" selected":""}${a?" disabled":""}" \n                        ${a?'aria-disabled="true"':""}>\n                        ${i}\n                    </li>\n                `)})),this.$select.after(this.$dropdown)}setupEvents(){this.$dropdown.find(".dropdown__button").on("click",(t=>{t.stopPropagation();const e=this.$dropdown.hasClass("visible");this.toggleDropdown(!e)})),this.$dropdown.find(".dropdown__list-item").on("click",(t=>{t.stopPropagation();const e=$(t.currentTarget);e.hasClass("disabled")||this.selectOption(e)})),$(document).on("click",(()=>this.closeDropdown())),$(document).on("keydown",(t=>{"Escape"===t.key&&this.closeDropdown()})),this.$select.closest("form").on("reset",(()=>this.restoreInitialState())),new MutationObserver((()=>{const t=this.$select.is(":disabled"),e=this.$dropdown.find(".dropdown__button");t?e.prop("disabled",!0):e.prop("disabled",!1)})).observe(this.$select[0],{attributes:!0,attributeFilter:["disabled"]}),new MutationObserver((t=>{t.forEach((t=>{if("attributes"===t.type&&"disabled"===t.attributeName){const e=$(t.target),n=e.attr("value"),s=e.is(":disabled"),o=this.$dropdown.find(`.dropdown__list-item[data-value="${n}"]`);o.toggleClass("disabled",s),s?o.attr("aria-disabled","true"):o.removeAttr("aria-disabled")}"attributes"===t.type&&"selected"===t.attributeName&&this.syncSelectedOption()}))})).observe(this.$select[0],{childList:!0,subtree:!0,attributes:!0,attributeFilter:["selected","disabled"]})}toggleDropdown(t){t&&s.openDropdown&&s.openDropdown!==this&&s.openDropdown.closeDropdown();const e=this.$dropdown.find(".dropdown__body"),n=this.$dropdown.find(".dropdown__list"),o=n[0].scrollHeight>n[0].clientHeight;if(this.$dropdown.toggleClass("visible",t),this.$dropdown.find(".dropdown__button").attr("aria-expanded",t),e.attr("aria-hidden",!t),t){s.openDropdown=this,this.$dropdown.removeClass("dropdown-top");const t=e[0].getBoundingClientRect(),i=window.innerHeight;t.bottom>i&&this.$dropdown.addClass("dropdown-top"),n.toggleClass("has-scroll",o)}else s.openDropdown===this&&(s.openDropdown=null)}closeDropdown(){this.toggleDropdown(!1)}selectOption(t){const e=t.data("value"),n=t.text();this.$dropdown.find(".dropdown__list-item").removeClass("selected").attr("aria-checked","false"),t.addClass("selected").attr("aria-checked","true"),this.$dropdown.find(".dropdown__button-text").text(n),this.$select.val(e).trigger("change"),this.closeDropdown()}restoreInitialState(){const t=this.initialState;this.$select.val(t.selectedValue).trigger("change"),this.$dropdown.find(".dropdown__list-item").removeClass("selected").attr("aria-checked","false"),this.$dropdown.find(`.dropdown__list-item[data-value="${t.selectedValue}"]`).addClass("selected").attr("aria-checked","true"),this.$dropdown.find(".dropdown__button-text").text(t.selectedText)}syncSelectedOption(){const t=this.$select.find("option:selected"),e=t.val(),n=t.text();this.$dropdown.find(".dropdown__list-item").removeClass("selected").attr("aria-checked","false"),this.$dropdown.find(`.dropdown__list-item[data-value="${e}"]`).addClass("selected").attr("aria-checked","true"),this.$dropdown.find(".dropdown__button-text").text(n)}}$(".select").each(((t,e)=>{new s(e)})),$(".phone-input").length>0&&$(".phone-input").each((function(t,e){let n=intlTelInput(e,{utilsScript:"https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/js/utils.js",initialCountry:"ru",separateDialCode:!0}),s=o();function o(){let t;return t="ru"==n.j?"({{999}}) {{999}}-{{99}}-{{99}}":"{{9999999999999999999999}}",t}e.addEventListener("countrychange",(function(){s=o(),$(e).formatter().resetPattern(s)})),$(e).formatter({pattern:s})}))}))})();